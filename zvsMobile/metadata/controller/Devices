{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "Devices"
    },
    "name": "MyController",
    "designerId": "6ce882fa-eb1d-4863-9c06-c76d93e27216",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "dataview#deviceDataview",
                "designer|targetType": "Ext.dataview.DataView",
                "fn": "onDataviewItemTap",
                "implHandler": [
                    "var mainView = this.getMainView();",
                    "var valuesStore = Ext.getStore('DeviceValuesStore');",
                    "valuesStore.filter('DeviceId', record.data.Id);",
                    "",
                    "valuesStore.load();",
                    "",
                    "var device = record.data;",
                    "",
                    "mainView.push({",
                    "    xtype: 'devicedetailstabpanel',",
                    "    title: device.Name,",
                    "    data: device",
                    "});",
                    ""
                ],
                "name": "itemtap"
            },
            "name": "onDataviewItemTap",
            "designerId": "d0522694-13c8-42c5-9e78-da8fb488bf72"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainView",
                "selector": "#mainView"
            },
            "name": "mainView",
            "designerId": "47c4e436-8611-4bff-97fd-b57fdd686044"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#devicesReloadBtn",
                "designer|targetType": "Ext.Button",
                "fn": "onReloadTap",
                "implHandler": [
                    "var deviceStore = Ext.getStore('DeviceStore');",
                    "deviceStore.load();"
                ],
                "name": "tap"
            },
            "name": "onReloadTap",
            "designerId": "eb3098de-7923-45d3-9165-8485b976891d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "dataview#deviceDataview",
                "designer|targetType": "Ext.dataview.DataView",
                "fn": "onDataviewRefresh",
                "implHandler": [
                    "var locationNames = [];",
                    "",
                    "var deviceStore = Ext.getStore('DeviceStore');",
                    "",
                    "var existingFilters = [];",
                    "var segButton = dataview.down('#filterSegmentedButton');",
                    "segButton.getItems().each(function(item)",
                    "                                                        {",
                    "                                                            existingFilters.push(item.locationFilter);",
                    "",
                    "",
                    "                                                        });",
                    "",
                    "",
                    "    //Create list without duplicates",
                    "",
                    "var allRecords = deviceStore.queryBy(function(){return true;});",
                    "    allRecords.each(function(element) {",
                    "        if(locationNames.indexOf(element.data.Location) === -1)",
                    "            locationNames.push(element.data.Location);",
                    "    });",
                    "",
                    "    locationNames.sort();",
                    "",
                    "    var buttons = [];",
                    "    locationNames.forEach(function(value, index, array) {",
                    "",
                    "        if(existingFilters.indexOf(value) === -1)",
                    "            buttons.push({ text: value, locationFilter:value });",
                    "    });",
                    "    segButton.add(buttons);",
                    ""
                ],
                "name": "refresh"
            },
            "name": "onDataviewRefresh",
            "designerId": "62fd5231-f582-429a-96d3-afa1576d8abf"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "segmentedbutton#filterSegmentedButton",
                "designer|targetType": "Ext.SegmentedButton",
                "fn": "onSegmentedbuttonToggle",
                "implHandler": [
                    "if(!isPressed)",
                    "    return;",
                    "",
                    "var deviceStore = Ext.getStore('DeviceStore');",
                    "var filter = button.locationFilter;",
                    "if(filter)",
                    "            {",
                    "                if(filter == 'all')",
                    "                    deviceStore.clearFilter();",
                    "                else",
                    "                    deviceStore.filter('Location', filter);",
                    "            }"
                ],
                "name": "toggle"
            },
            "name": "onSegmentedbuttonToggle",
            "designerId": "cef6ff2e-9edb-4f2b-8b33-c218cdf788e1"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "deviceDetailsTabPanel",
                "selector": "tabpanel#deviceDetailsTabPanel"
            },
            "name": "deviceDetailsTabPanel",
            "designerId": "680f921f-1379-447c-9eb4-b7d2e1e782c0"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "filterSegmentedButton",
                "selector": "segmentedbutton#filterSegmentedButton"
            },
            "name": "filterSegmentedButton",
            "designerId": "54a5249d-9493-4bee-8fa3-8f3dbfd7f044"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "deviceToolbar",
                "selector": "toolbar#deviceToolbar"
            },
            "name": "deviceToolbar",
            "designerId": "1cd3ee3c-d4f0-4358-8fe1-f188665be5af"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "panel#devicesPanel",
                "designer|targetType": "Ext.Panel",
                "fn": "onPanelInitialize",
                "implHandler": [
                    " var deviceStore = Ext.getStore('DeviceStore');",
                    "        deviceStore.load();"
                ],
                "name": "initialize"
            },
            "name": "onPanelInitialize",
            "designerId": "98b9126d-23de-4dac-b5f9-da592bdd0934"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "panel#deviceControlPanel",
                "designer|targetType": "Ext.Panel",
                "fn": "onControlPanelShow",
                "implHandler": [
                    "var device = component.getParent().getData();",
                    "",
                    "component.down('#typeTextField').setValue(device.type.Name);",
                    "component.down('#locationTextField').setValue(device.Location);",
                    "",
                    "Ext.Ajax.request({",
                    "    url: zvsMobile.app.getBaseUrl() + 'odata4/DeviceValues/?$filter=DeviceId eq '+device.Id+' and Genre eq \\'User\\'&$select=UniqueIdentifier, Value',",
                    "    method: 'GET',",
                    "    scope : this,",
                    "    headers: {",
                    "        'Content-Type': 'application/json',",
                    "        'X-zvsToken': zvsMobile.app.getToken()",
                    "    },",
                    "    success: function (response, opts) {",
                    "        var result = JSON.parse(response.responseText);",
                    "        if (result.value.length > 0) {",
                    "            var values = result.value;",
                    "",
                    "            var commandFilter = '';",
                    "",
                    "            for(i=0; i<values.length; i++) {",
                    "                var value = values[i];",
                    "",
                    "                if(i !== 0 )",
                    "                    commandFilter = commandFilter + ' or';",
                    "",
                    "                commandFilter = commandFilter + ' CustomData2 eq \\''+value.UniqueIdentifier+'\\'';",
                    "            }",
                    "",
                    "            var uri = 'odata4/DeviceCommands/?$filter=DeviceId eq ' + device.Id;",
                    "            uri = uri + ' and ' + commandFilter;",
                    "            uri = uri + '&$expand=Options';",
                    "",
                    "            var store = Ext.getStore('DeviceCommandStore');",
                    "            store.getProxy().setUrl(uri);",
                    "            store.load({",
                    "                callback: function(records, operation, success) {",
                    "                    // the operation object contains all of the details of the load operation",
                    "",
                    "                    store.getData().each(function(item){",
                    "",
                    "                        var defaultValue= '';",
                    "                        for(i=0; i<values.length; i++) {",
                    "                            if(values[i].UniqueIdentifier == item.data.CustomData2)",
                    "                                defaultValue =values[i].Value;",
                    "                        }",
                    "",
                    "                        if(item.data.ArgumentType == 'LIST')",
                    "                        {",
                    "                            var options = [];",
                    "                            item.raw.Options.forEach(function(option){",
                    "                                options.push({text: option.Name,  value: option.Name});",
                    "                            });",
                    "",
                    "                            var input = component.add({",
                    "                                xtype: 'selectfield',",
                    "                                label: item.data.Name,",
                    "                                value:defaultValue,",
                    "                                margin: '10 5 0 5 ',",
                    "                                commandId: item.data.Id,",
                    "                                options: options,",
                    "                                listeners: {",
                    "                                    change: function(inpt, newValue, oldValue, eOpts ) {",
                    "                                        zvsMobile.controller.Devices.setCommand(inpt.commandId, newValue.toString(), null, component);",
                    "                                    }",
                    "                                }",
                    "                            });",
                    "                            input.suspendEvents();",
                    "                            input.setValue(defaultValue);",
                    "                            input.resumeEvents(true);",
                    "",
                    "",
                    "                        }",
                    "                        else if(item.data.ArgumentType == 'NONE')",
                    "                        {",
                    "",
                    "                            var input = component.add({",
                    "                                xtype: 'checkboxfield',",
                    "                                label: item.data.Name,",
                    "",
                    "                                margin: '10 5 0 5 ',",
                    "                                commandId: item.data.Id,",
                    "                                listeners: {",
                    "                                    change: function(inpt,newValue, oldValue, eOpts ) {",
                    "",
                    "                                        zvsMobile.controller.Devices.setCommand(inpt.commandId, '', '', component);",
                    "",
                    "                                        inpt.suspendEvents();",
                    "                                        setTimeout(function(){inpt.uncheck();",
                    "                                        inpt.resumeEvents(true);}, 900);",
                    "",
                    "                                    }",
                    "                                }",
                    "                            });",
                    "",
                    "",
                    "",
                    "                        }",
                    "                        else if(item.data.ArgumentType == 'STRING')",
                    "                        {",
                    "",
                    "                            var input = component.add({",
                    "                                xtype: 'textfield',",
                    "                                label: item.data.Name,",
                    "",
                    "                                clearIcon:false,",
                    "                                margin: '10 5 0 5 ',",
                    "                                commandId: item.data.Id,",
                    "                                listeners: {",
                    "                                    change: function(inpt,newValue, oldValue, eOpts ) {",
                    "                                        zvsMobile.controller.Devices.setCommand(inpt.commandId, newValue.toString(), null, component);",
                    "                                    }",
                    "                                }",
                    "                            });",
                    "                            input.suspendEvents();",
                    "                            input.setValue(defaultValue);",
                    "                            input.resumeEvents(true);",
                    "",
                    "                        }",
                    "                        else if(item.data.ArgumentType == 'BOOL')",
                    "                        {",
                    "",
                    "                            var input = component.add({",
                    "                                xtype: 'togglefield',",
                    "                                label: item.data.Name,",
                    "                                margin: '10 5 0 5 ',",
                    "                                commandId: item.data.Id,",
                    "                                listeners: {",
                    "                                    change: function(inpt,newValue, oldValue, eOpts ) {",
                    "                                        zvsMobile.controller.Devices.setCommand(inpt.commandId, newValue> 0 ? 'true':'false', null, component);",
                    "                                    }",
                    "                                }",
                    "                            });",
                    "                            input.suspendEvents();",
                    "                            input.setValue(defaultValue);",
                    "                            input.resumeEvents(true);",
                    "",
                    "                        }",
                    "                        else if(item.data.ArgumentType == 'BYTE' || item.data.ArgumentType == 'INTEGER' || item.data.ArgumentType == 'DECIMAL' || item.data.ArgumentType == 'SHORT')",
                    "                        {",
                    "",
                    "                            var input = component.add({",
                    "                                xtype: 'numberfield',",
                    "                                label: item.data.Name,",
                    "",
                    "                                clearIcon:false,",
                    "                                margin: '10 5 0 5 ',",
                    "                                commandId: item.data.Id,",
                    "                                listeners: {",
                    "                                    change: function(inpt,newValue, oldValue, eOpts ) {",
                    "",
                    "",
                    "                                        var intRegex = /^\\d+$/;",
                    "                                        if(newValue === '' ||",
                    "                                          ((newValue < 0 || newValue >255) && item.data.ArgumentType == 'BYTE')",
                    "                                           //|| (item.data.ArgumentType == 'INTEGER' && intRegex.test(someNumber))",
                    "                                          )",
                    "                                            {",
                    "                                                Ext.Msg.alert('Aw, Snap!', 'Input not valid.');",
                    "                                                inpt.suspendEvents();",
                    "                                                    inpt.setValue(oldValue);",
                    "                                                    inpt.resumeEvents(true);",
                    "                                                return;",
                    "                                            }",
                    "",
                    "",
                    "",
                    "                                        zvsMobile.controller.Devices.setCommand(inpt.commandId, newValue.toString(), null, component);",
                    "                                    }",
                    "                                }",
                    "                            });",
                    "                            input.suspendEvents();",
                    "                            input.setValue(defaultValue);",
                    "                            input.resumeEvents(true);",
                    "",
                    "                        }",
                    "",
                    "",
                    "                    });",
                    "                },",
                    "                scope: this",
                    "            });",
                    "",
                    "",
                    "",
                    "        }",
                    "        else {",
                    "            component.setError('Unabled to load device commands.');",
                    "        }",
                    "    },",
                    "    failure: function (response, opts) {",
                    "        var result = JSON.parse(response.responseText);",
                    "        component.setError(result.error.message);",
                    "    }",
                    "});",
                    ""
                ],
                "name": "show"
            },
            "name": "onControlPanelShow",
            "designerId": "b1f50205-1b5a-4c2c-812f-74a0118902c0"
        },
        {
            "type": "staticfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "commandId, arg1, arg2, panel"
                ],
                "fn": "setCommand",
                "implHandler": [
                    "var uri = zvsMobile.app.getBaseUrl() + 'odata4/DeviceCommands(' + commandId + ')/Actions.Execute';",
                    "var panel1 = panel;",
                    "Ext.Ajax.request({",
                    "    scope:  this,",
                    "    url: uri,",
                    "    method: 'POST',",
                    "    headers: {",
                    "        'Content-Type': 'application/json',",
                    "        'X-zvsToken':zvsMobile.app.getToken()",
                    "    },",
                    "    jsonData: {",
                    "        Argument: arg1.toString(),",
                    "        Argument2: arg2",
                    "    },",
                    "    success: function (response, opts) {",
                    "",
                    "        var result = JSON.parse(response.responseText);",
                    "        if (result.value) {",
                    "            panel1.setSuccess(result.value);",
                    "",
                    "        }",
                    "        else {",
                    "            panel1.setError('Error setting command.');",
                    "        }",
                    "    },",
                    "    failure: function (response, opts) {",
                    "        var result = JSON.parse(response.responseText);",
                    "",
                    "        panel1.setError(result.error.message);",
                    "    }",
                    "});"
                ]
            },
            "name": "setCommand",
            "designerId": "ee3314fb-d52d-42aa-95ce-d942d7167972"
        }
    ]
}