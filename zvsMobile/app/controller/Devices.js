/*
 * File: app/controller/Devices.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('zvsMobile.controller.Devices', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mainView: '#mainView',
            deviceDetailsTabPanel: 'tabpanel#deviceDetailsTabPanel',
            switchControlPanel: 'panel#switchControlPanel',
            thermoControlPanel: 'panel#thermoControlPanel',
            dimmerControlPanel: 'panel#dimmerControlPanel',
            filterSegmentedButton: 'segmentedbutton#filterSegmentedButton',
            deviceToolbar: 'toolbar#deviceToolbar'
        },

        control: {
            "dataview#deviceDataview": {
                itemtap: 'onDataviewItemTap',
                refresh: 'onDataviewRefresh'
            },
            "button#devicesReloadBtn": {
                tap: 'onReloadTap'
            },
            "segmentedbutton#filterSegmentedButton": {
                toggle: 'onSegmentedbuttonToggle'
            },
            "tabpanel#deviceDetailsTabPanel": {
                updatedata: 'onTabpanelUpdatedata'
            },
            "sliderfield#dimmerSlider": {
                change: 'onSliderfieldChange'
            },
            "togglefield": {
                change: 'onOffSwitchTogglefieldChange'
            },
            "panel#devicesPanel": {
                initialize: 'onPanelInitialize'
            }
        }
    },

    onDataviewItemTap: function(dataview, index, target, record, e, eOpts) {
        var mainView = this.getMainView();
        var valuesStore = Ext.getStore('DeviceValuesStore');
        valuesStore.filter('DeviceId', record.data.Id);

        valuesStore.load();

        var device = record.data;

        mainView.push({
            xtype: 'devicedetailstabpanel',
            title: device.Name,
            data: device
        });

        var deviceDetailsTabPanel = this.getDeviceDetailsTabPanel();

        var switchControlPanel = this.getSwitchControlPanel();
        var dimmerControlPanel = this.getDimmerControlPanel();
        var thermoControlPanel = this.getThermoControlPanel();
        deviceDetailsTabPanel.getTabBar().getComponent(0).hide();
        deviceDetailsTabPanel.getTabBar().getComponent(1).hide();
        deviceDetailsTabPanel.getTabBar().getComponent(2).hide();

        if(device.type.UniqueIdentifier == 'SWITCH')
        {
            switchControlPanel.setRecord(device);
            deviceDetailsTabPanel.setActiveItem(0);
            deviceDetailsTabPanel.getTabBar().getComponent(0).show();
        }
        else if(device.type.UniqueIdentifier == 'DIMMER')
        {
            dimmerControlPanel.setRecord(device);
            deviceDetailsTabPanel.setActiveItem(1);
            deviceDetailsTabPanel.getTabBar().getComponent(1).show();
        }
        else if(device.type.UniqueIdentifier == 'THERMOSTAT')
        {
            thermoControlPanel.setRecord(device);
            deviceDetailsTabPanel.setActiveItem(2);
            deviceDetailsTabPanel.getTabBar().getComponent(2).show();
        }



        var panel = this.getDimmerControlPanel();
        panel.setRecord(record.data);
    },

    onReloadTap: function(button, e, eOpts) {
        var deviceStore = Ext.getStore('DeviceStore');
        deviceStore.load();
    },

    onDataviewRefresh: function(dataview, eOpts) {
        var locationNames = [];
        var segButton = this.getFilterSegmentedButton();

        var deviceStore = Ext.getStore('DeviceStore');
        var toolbar = this.getDeviceToolbar();
        if(deviceStore.getFilters().length === 0 && segButton.getItems().length == 1)
        {
            //Create list without duplicates
            deviceStore.each(function(element) {
                if(locationNames.indexOf(element.data.Location) === -1)
                    locationNames.push(element.data.Location);
            });

            locationNames.sort();

            var buttons = [];
            locationNames.forEach(function(value, index, array) {

                var existingFilters = segButton.getItems();
                buttons.push({ text: value, locationFilter:value });
            });
            segButton.add(buttons);
        }
    },

    onSegmentedbuttonToggle: function(segmentedbutton, button, isPressed, eOpts) {
        if(!isPressed)
            return;

        var deviceStore = Ext.getStore('DeviceStore');
        var filter = button.locationFilter;
        if(filter)
                    {
                        if(filter == 'all')
                            deviceStore.clearFilter();
                        else
                            deviceStore.filter('Location', filter);
                    }
    },

    onTabpanelUpdatedata: function(component, newData, eOpts) {

    },

    onSliderfieldChange: function(me, sl, thumb, newValue, oldValue, eOpts) {
        //dimmerSlider
        var panel = this.getDimmerControlPanel();
        var device = panel.getData();

        Ext.Ajax.request({
            url: zvsMobile.app.getBaseUrl() + 'odata4/DeviceCommands/?$filter=contains(UniqueIdentifier, \'DYNAMIC_CMD_BASIC\') and DeviceId eq '+ device.Id,
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-zvsToken':zvsMobile.app.getToken()
            },
            success: function (response, opts) {
                var result = JSON.parse(response.responseText);
                if (result.value.length == 1) {
                    var commandId = result.value[0].Id;
                    Ext.Ajax.request({
                        url: zvsMobile.app.getBaseUrl() + 'odata4/DeviceCommands('+commandId+')/Actions.Execute',
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-zvsToken':zvsMobile.app.getToken()
                        },
                        jsonData: {
                            Argument: newValue.toString(),
                            Argument2: null
                        },
                        success: function (response, opts) {
                            var result = JSON.parse(response.responseText);
                            if (result.value) {
                                panel.setSuccess(result.value);

                            }
                            else {
                                panel.setError('Error setting command.');
                            }
                        },
                        failure: function (response, opts) {
                            var result = JSON.parse(response.responseText);

                            panel.setError(result.error.message);
                        }
                    });

                }
                else {
                    panel.setError('Device command not found.');
                }
            },
            failure: function (response, opts) {
                var result = JSON.parse(response.responseText);
                panel.setError(result.error.message);
            }
        });
    },

    onOffSwitchTogglefieldChange: function(togglefield, newValue, oldValue, eOpts) {
                var panel = this.getSwitchControlPanel();
                var device = panel.getData();
                var uId = newValue === 0 ? 'TURNOFF' : 'TURNON';


                Ext.Ajax.request({
                    url: zvsMobile.app.getBaseUrl() + 'odata4/DeviceTypeCommands/?$filter=UniqueIdentifier eq \''+uId+'\' and DeviceTypeId eq '+ device.DeviceTypeId + '&$select=Id',

                    //odata4/DeviceCommands/?$filter=CustomData1 eq \'Basic\' and DeviceId eq '+ device.Id + '&$select=Id',
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-zvsToken': zvsMobile.app.getToken()
                    },
                    success: function (response, opts) {
                        var result = JSON.parse(response.responseText);
                        if (result.value.length == 1) {
                            var commandId = result.value[0].Id;
                            Ext.Ajax.request({
                                url: zvsMobile.app.getBaseUrl() + 'odata4/DeviceTypeCommands('+commandId+')/Actions.Execute',
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-zvsToken':zvsMobile.app.getToken()
                                },
                                jsonData: {
                                    Argument: null,
                                    Argument2: device.Id.toString()
                                },
                                success: function (response, opts) {
                                    var result = JSON.parse(response.responseText);
                                    if (result.value) {
                                        panel.setSuccess(result.value);
                                    }
                                    else {
                                        panel.setError('Error setting command.');
                                    }
                                },
                                failure: function (response, opts) {
                                    var result = JSON.parse(response.responseText);
                                    panel.setError(result.error.message);
                                }
                            });

                        }
                        else {
                            panel.setError('Device command not found.');
                        }
                    },
                    failure: function (response, opts) {
                        var result = JSON.parse(response.responseText);
                        panel.setError(result.error.message);
                    }
                });
    },

    onPanelInitialize: function(component, eOpts) {
         var deviceStore = Ext.getStore('DeviceStore');
                deviceStore.load();
    }

});