/*
 * File: app/controller/Devices.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('zvsMobile.controller.Devices', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mainView: '#mainView'
        },

        control: {
            "dataview#deviceDataview": {
                itemtap: 'onDataviewItemTap',
                refresh: 'onDataviewRefresh'
            },
            "button#devicesReloadBtn": {
                tap: 'onReloadTap'
            },
            "segmentedbutton#filterSegmentedButton": {
                toggle: 'onSegmentedbuttonToggle'
            },
            "panel#devicesPanel": {
                initialize: 'onPanelInitialize',
                show: 'onDevicePanelShow'
            }
        }
    },

    onDataviewItemTap: function(dataview, index, target, record, e, eOpts) {
        var mainView = this.getMainView();
        var valuesStore = Ext.getStore('DeviceValuesStore');
        var uri = 'odata4/DeviceValues/?$filter=DeviceId eq ' + record.data.Id;
        valuesStore.getProxy().setUrl(uri);
        valuesStore.load();

        var device = record.getData();

        mainView.push({
            xtype: 'devicedetailstabpanel',
            title: device.Name + ' - ' + device.Location,
            record: record
        });
    },

    onReloadTap: function(button, e, eOpts) {
        var deviceStore = Ext.getStore('DeviceStore');
        deviceStore.load();
    },

    onDataviewRefresh: function(dataview, eOpts) {
        var locationNames = [];

        var deviceStore = Ext.getStore('DeviceStore');

        var existingFilters = [];
        var segButton = dataview.down('#filterSegmentedButton');

        segButton.getItems().each(function(item) {
            existingFilters.push(item.getInitialConfig().locationFilter);
        });



        //Create list without duplicates

        var allRecords = deviceStore.queryBy(function(){return true;});
        allRecords.each(function(element) {
            if(locationNames.indexOf(element.data.Location) === -1)
                locationNames.push(element.data.Location);
        });



        locationNames.sort();



        var buttons = [];
        locationNames.forEach(function(value, index, array) {

            if(existingFilters.indexOf(value) === -1)
                buttons.push({ text: value, locationFilter:value });
        });
        segButton.add(buttons);
    },

    onSegmentedbuttonToggle: function(segmentedbutton, button, isPressed, eOpts) {
        if(!isPressed)
            return;

        var deviceStore = Ext.getStore('DeviceStore');
        var filter = button.getInitialConfig().locationFilter;
        if(filter)
        {
            if(filter == 'all')
                deviceStore.clearFilter();
            else
                deviceStore.filter('Location', filter);
        }
    },

    onPanelInitialize: function(component, eOpts) {
        var deviceStore = Ext.getStore('DeviceStore');
        deviceStore.load();
        deviceStore.clearFilter();
    },

    onDevicePanelShow: function(component, eOpts) {
        var deviceStore = Ext.getStore('DeviceStore');

        if(deviceStore.needsRefresh)
        {
            deviceStore.load();

            deviceStore.needsRefresh = false;
        }
    }

});