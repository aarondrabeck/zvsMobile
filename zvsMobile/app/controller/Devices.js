/*
 * File: app/controller/Devices.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('zvsMobile.controller.Devices', {
    extend: 'Ext.app.Controller',

    statics: {
        setCommand: function(commandId, arg1, arg2, panel) {
            var uri = zvsMobile.app.getBaseUrl() + 'odata4/DeviceCommands(' + commandId + ')/Actions.Execute';
            var panel1 = panel;
            Ext.Ajax.request({
                scope:  this,
                url: uri,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-zvsToken':zvsMobile.app.getToken()
                },
                jsonData: {
                    Argument: arg1.toString(),
                    Argument2: arg2
                },
                success: function (response, opts) {

                    var result = JSON.parse(response.responseText);
                    if (result.value) {
                        panel1.setSuccess(result.value);

                    }
                    else {
                        panel1.setError('Error setting command.');
                    }
                },
                failure: function (response, opts) {
                    var result = JSON.parse(response.responseText);

                    panel1.setError(result.error.message);
                }
            });
        }
    },

    config: {
        refs: {
            mainView: '#mainView',
            deviceDetailsTabPanel: 'tabpanel#deviceDetailsTabPanel',
            filterSegmentedButton: 'segmentedbutton#filterSegmentedButton',
            deviceToolbar: 'toolbar#deviceToolbar'
        },

        control: {
            "dataview#deviceDataview": {
                itemtap: 'onDataviewItemTap',
                refresh: 'onDataviewRefresh'
            },
            "button#devicesReloadBtn": {
                tap: 'onReloadTap'
            },
            "segmentedbutton#filterSegmentedButton": {
                toggle: 'onSegmentedbuttonToggle'
            },
            "panel#devicesPanel": {
                initialize: 'onPanelInitialize'
            },
            "panel#deviceControlPanel": {
                show: 'onControlPanelShow'
            }
        }
    },

    onDataviewItemTap: function(dataview, index, target, record, e, eOpts) {
        var mainView = this.getMainView();
        var valuesStore = Ext.getStore('DeviceValuesStore');
        valuesStore.filter('DeviceId', record.data.Id);

        valuesStore.load();

        var device = record.data;

        mainView.push({
            xtype: 'devicedetailstabpanel',
            title: device.Name,
            data: device
        });

    },

    onReloadTap: function(button, e, eOpts) {
        var deviceStore = Ext.getStore('DeviceStore');
        deviceStore.load();
    },

    onDataviewRefresh: function(dataview, eOpts) {
        var locationNames = [];

        var deviceStore = Ext.getStore('DeviceStore');

        var existingFilters = [];
        var segButton = dataview.down('#filterSegmentedButton');
        segButton.getItems().each(function(item)
                                                                {
                                                                    existingFilters.push(item.locationFilter);


                                                                });


            //Create list without duplicates

        var allRecords = deviceStore.queryBy(function(){return true;});
            allRecords.each(function(element) {
                if(locationNames.indexOf(element.data.Location) === -1)
                    locationNames.push(element.data.Location);
            });

            locationNames.sort();

            var buttons = [];
            locationNames.forEach(function(value, index, array) {

                if(existingFilters.indexOf(value) === -1)
                    buttons.push({ text: value, locationFilter:value });
            });
            segButton.add(buttons);

    },

    onSegmentedbuttonToggle: function(segmentedbutton, button, isPressed, eOpts) {
        if(!isPressed)
            return;

        var deviceStore = Ext.getStore('DeviceStore');
        var filter = button.locationFilter;
        if(filter)
                    {
                        if(filter == 'all')
                            deviceStore.clearFilter();
                        else
                            deviceStore.filter('Location', filter);
                    }
    },

    onPanelInitialize: function(component, eOpts) {
         var deviceStore = Ext.getStore('DeviceStore');
                deviceStore.load();
    },

    onControlPanelShow: function(component, eOpts) {
        var device = component.getParent().getData();

        component.down('#typeTextField').setValue(device.type.Name);
        component.down('#locationTextField').setValue(device.Location);

        Ext.Ajax.request({
            url: zvsMobile.app.getBaseUrl() + 'odata4/DeviceValues/?$filter=DeviceId eq '+device.Id+' and Genre eq \'User\'&$select=UniqueIdentifier, Value',
            method: 'GET',
            scope : this,
            headers: {
                'Content-Type': 'application/json',
                'X-zvsToken': zvsMobile.app.getToken()
            },
            success: function (response, opts) {
                var result = JSON.parse(response.responseText);
                if (result.value.length > 0) {
                    var values = result.value;

                    var commandFilter = '';

                    for(i=0; i<values.length; i++) {
                        var value = values[i];

                        if(i !== 0 )
                            commandFilter = commandFilter + ' or';

                        commandFilter = commandFilter + ' CustomData2 eq \''+value.UniqueIdentifier+'\'';
                    }

                    var uri = 'odata4/DeviceCommands/?$filter=DeviceId eq ' + device.Id;
                    uri = uri + ' and ' + commandFilter;
                    uri = uri + '&$expand=Options';

                    var store = Ext.getStore('DeviceCommandStore');
                    store.getProxy().setUrl(uri);
                    store.load({
                        callback: function(records, operation, success) {
                            // the operation object contains all of the details of the load operation

                            store.getData().each(function(item){

                                var defaultValue= '';
                                for(i=0; i<values.length; i++) {
                                    if(values[i].UniqueIdentifier == item.data.CustomData2)
                                        defaultValue =values[i].Value;
                                }

                                if(item.data.ArgumentType == 'LIST')
                                {
                                    var options = [];
                                    item.raw.Options.forEach(function(option){
                                        options.push({text: option.Name,  value: option.Name});
                                    });

                                    var input = component.add({
                                        xtype: 'selectfield',
                                        label: item.data.Name,
                                        value:defaultValue,
                                        margin: '10 5 0 5 ',
                                        commandId: item.data.Id,
                                        options: options,
                                        listeners: {
                                            change: function(inpt, newValue, oldValue, eOpts ) {
                                                zvsMobile.controller.Devices.setCommand(inpt.commandId, newValue.toString(), null, component);
                                            }
                                        }
                                    });
                                    input.suspendEvents();
                                    input.setValue(defaultValue);
                                    input.resumeEvents(true);


                                }
                                else if(item.data.ArgumentType == 'NONE')
                                {

                                    var input = component.add({
                                        xtype: 'checkboxfield',
                                        label: item.data.Name,

                                        margin: '10 5 0 5 ',
                                        commandId: item.data.Id,
                                        listeners: {
                                            change: function(inpt,newValue, oldValue, eOpts ) {

                                                zvsMobile.controller.Devices.setCommand(inpt.commandId, '', '', component);

                                                inpt.suspendEvents();
                                                setTimeout(function(){inpt.uncheck();
                                                inpt.resumeEvents(true);}, 900);

                                            }
                                        }
                                    });



                                }
                                else if(item.data.ArgumentType == 'STRING')
                                {

                                    var input = component.add({
                                        xtype: 'textfield',
                                        label: item.data.Name,

                                        clearIcon:false,
                                        margin: '10 5 0 5 ',
                                        commandId: item.data.Id,
                                        listeners: {
                                            change: function(inpt,newValue, oldValue, eOpts ) {
                                                zvsMobile.controller.Devices.setCommand(inpt.commandId, newValue.toString(), null, component);
                                            }
                                        }
                                    });
                                    input.suspendEvents();
                                    input.setValue(defaultValue);
                                    input.resumeEvents(true);

                                }
                                else if(item.data.ArgumentType == 'BOOL')
                                {

                                    var input = component.add({
                                        xtype: 'togglefield',
                                        label: item.data.Name,
                                        margin: '10 5 0 5 ',
                                        commandId: item.data.Id,
                                        listeners: {
                                            change: function(inpt,newValue, oldValue, eOpts ) {
                                                zvsMobile.controller.Devices.setCommand(inpt.commandId, newValue> 0 ? 'true':'false', null, component);
                                            }
                                        }
                                    });
                                    input.suspendEvents();
                                    input.setValue(defaultValue);
                                    input.resumeEvents(true);

                                }
                                else if(item.data.ArgumentType == 'BYTE' || item.data.ArgumentType == 'INTEGER' || item.data.ArgumentType == 'DECIMAL' || item.data.ArgumentType == 'SHORT')
                                {

                                    var input = component.add({
                                        xtype: 'numberfield',
                                        label: item.data.Name,

                                        clearIcon:false,
                                        margin: '10 5 0 5 ',
                                        commandId: item.data.Id,
                                        listeners: {
                                            change: function(inpt,newValue, oldValue, eOpts ) {


                                                var intRegex = /^\d+$/;
                                                if(newValue === '' ||
                                                  ((newValue < 0 || newValue >255) && item.data.ArgumentType == 'BYTE')
                                                   //|| (item.data.ArgumentType == 'INTEGER' && intRegex.test(someNumber))
                                                  )
                                                    {
                                                        Ext.Msg.alert('Aw, Snap!', 'Input not valid.');
                                                        inpt.suspendEvents();
                                                            inpt.setValue(oldValue);
                                                            inpt.resumeEvents(true);
                                                        return;
                                                    }



                                                zvsMobile.controller.Devices.setCommand(inpt.commandId, newValue.toString(), null, component);
                                            }
                                        }
                                    });
                                    input.suspendEvents();
                                    input.setValue(defaultValue);
                                    input.resumeEvents(true);

                                }


                            });
                        },
                        scope: this
                    });



                }
                else {
                    component.setError('Unabled to load device commands.');
                }
            },
            failure: function (response, opts) {
                var result = JSON.parse(response.responseText);
                component.setError(result.error.message);
            }
        });

    }

});