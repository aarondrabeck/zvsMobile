/*
 * File: app/view/DimmerControlPanel.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('zvsMobile.view.DimmerControlPanel', {
    extend: 'Ext.Panel',
    alias: 'widget.dimmercontrolpanel',

    requires: [
        'Ext.field.Text',
        'Ext.field.Slider',
        'Ext.Label',
        'Ext.chart.series.sprite.PieSlice'
    ],

    config: {
        itemId: 'dimmerControlPanel',
        scrollable: 'vertical',
        items: [
            {
                xtype: 'textfield',
                disabled: true,
                itemId: 'locationTextField',
                margin: '10 5 0 5 ',
                label: 'Room'
            },
            {
                xtype: 'textfield',
                disabled: true,
                itemId: 'typeTextField',
                margin: '10 5 0 5 ',
                label: 'Type'
            },
            {
                xtype: 'textfield',
                disabled: true,
                itemId: 'levelTextField',
                margin: '10 5 0 5 ',
                label: 'Level'
            },
            {
                xtype: 'sliderfield',
                id: 'dimmerSlider',
                itemId: 'mysliderfield',
                margin: '10 5 0 5 ',
                label: 'Set'
            },
            {
                xtype: 'label',
                itemId: 'feedbackLabel',
                margin: 10
            }
        ],
        listeners: [
            {
                fn: 'onDimmerSliderChange',
                event: 'change',
                delegate: '#dimmerSlider'
            }
        ]
    },

    onDimmerSliderChange: function(me, sl, thumb, newValue, oldValue, eOpts) {
        this.down('#levelTextField').setValue(newValue + '%');
    },

    setRecord: function(record) {
        this.callParent(arguments);
        if (record) {

            this.down('#typeTextField').setValue(record.type.Name);
            this.down('#locationTextField').setValue(record.Location);
            this.down('#levelTextField').setValue(record.CurrentLevelText);
            this.setData(record);


            var slider = this.down('#dimmerSlider');
            slider.suspendEvents();
            slider.setValue(record.CurrentLevelInt);

            slider.resumeEvents(true);

        }

    },

    setError: function(message) {
               var feedbackLabel= this.down('#feedbackLabel');
                feedbackLabel.setHtml(message);
               feedbackLabel.setStyle('color:red');
    },

    setSuccess: function(message) {
         var feedbackLabel= this.down('#feedbackLabel');
                feedbackLabel.setHtml(message);
               feedbackLabel.setStyle('color:green');
    }

});