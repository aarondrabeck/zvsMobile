/*
 * File: app/controller/DevicesController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('zvsMobile.controller.DevicesController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mainView: '#mainView'
        },

        control: {
            "dataview#deviceDataview": {
                itemtap: 'onDataviewItemTap',
                refresh: 'onDataviewRefresh'
            },
            "button#devicesReloadBtn": {
                tap: 'onReloadTap'
            },
            "segmentedbutton#filterSegmentedButton": {
                toggle: 'onSegmentedbuttonToggle'
            }
        }
    },

    onDataviewItemTap: function(dataview, index, target, record, e, eOpts) {
        var mainView = this.getMainView();
        var valuesStore = Ext.getStore('DeviceValuesStore');
        valuesStore.filter('DeviceId', record.data.Id);

        valuesStore.load();

         mainView.push({
                    xtype: 'devicedetailstabpanel',
                    title: record.data.Name,
                    data: record.data
                });

    },

    onReloadTap: function(button, e, eOpts) {
        var deviceStore = Ext.getStore('DeviceStore');
        deviceStore.load();
    },

    onDataviewRefresh: function(dataview, eOpts) {

        var locationNames = [];
        var items = [{text: 'All', locationFilter: 'all',pressed:true}];
        var deviceStore = Ext.getStore('DeviceStore');
        var toolbar = Ext.getCmp('deviceToolbar');
        if(deviceStore.getFilters().length === 0)
        {
            deviceStore.each(function(element) {


                var item =  {
                            text: element.data.Location,
                            locationFilter:element.data.Location
                        };


                if(locationNames.indexOf(element.data.Location) === -1)
                    items.push(item);

                locationNames.push(element.data.Location);
            });
            var segButton  =Ext.getCmp('filterSegmentedButton');
            segButton.removeAll();
         segButton.add(items);

        }
    },

    onSegmentedbuttonToggle: function(segmentedbutton, button, isPressed, eOpts) {

        var deviceStore = Ext.getStore('DeviceStore');
        var filter = button.locationFilter;
        if(filter)
                    {
                        if(filter == 'all')
                            deviceStore.clearFilter();
                        else
                            deviceStore.filter('Location', filter);
                    }
    }

});